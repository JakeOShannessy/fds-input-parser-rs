// #![rustfmt::skip] // Currently unstable
use namelist::*;
use std::collections::HashMap;
pub fn init_spec() -> NamelistSpec {
    let mut namelist_spec = HashMap::new();
    {
        let mut group_spec = HashMap::new();
        group_spec.insert("CHID".to_string(), ParameterSpec::Atom(ParameterSpecAtom::String));
        group_spec.insert("FYI".to_string(), ParameterSpec::Atom(ParameterSpecAtom::String));
        group_spec.insert("TITLE".to_string(), ParameterSpec::Atom(ParameterSpecAtom::String));
        group_spec.insert("STOPFDS".to_string(), ParameterSpec::Atom(ParameterSpecAtom::String));
        namelist_spec.insert("HEAD".to_string(), group_spec);
    }
    {
        let mut group_spec = HashMap::new();
        group_spec.insert("CHID".to_string(), ParameterSpec::Atom(ParameterSpecAtom::String));
        group_spec.insert("COLOR".to_string(), ParameterSpec::Atom(ParameterSpecAtom::String));
        group_spec.insert("CYLINDRICAL".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Bool));
        group_spec.insert("EVACUATION".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Bool));
        group_spec.insert("EVAC_HUMANS".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Bool));
        group_spec.insert("EVAC_Z_OFFSET".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Double));
        group_spec.insert("FYI".to_string(), ParameterSpec::Atom(ParameterSpecAtom::String));
        group_spec.insert("ID".to_string(), ParameterSpec::Atom(ParameterSpecAtom::String));
        group_spec.insert("IJK".to_string(), ParameterSpec::Array(ParameterSpecAtom::Int));
        group_spec.insert("LEVEL".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Int));
        group_spec.insert("MPI_PROCESS".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Int));
        group_spec.insert("MULT_ID".to_string(), ParameterSpec::Atom(ParameterSpecAtom::String));
        group_spec.insert("RGB".to_string(), ParameterSpec::Array(ParameterSpecAtom::Double));
        group_spec.insert("XB".to_string(), ParameterSpec::Array(ParameterSpecAtom::Double));
        group_spec.insert("N_THREADS".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Int));
        group_spec.insert("PERIODIC_MESH_IDS".to_string(), ParameterSpec::Array(ParameterSpecAtom::String));
        namelist_spec.insert("MESH".to_string(), group_spec);
    }
    {
        let mut group_spec = HashMap::new();
        group_spec.insert("DT".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Double));
        group_spec.insert("EVAC_DT_FLOWFIELD".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Double));
        group_spec.insert("EVAC_DT_STEADY_STATE".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Double));
        group_spec.insert("FYI".to_string(), ParameterSpec::Atom(ParameterSpecAtom::String));
        group_spec.insert("LIMITING_DT_RATIO".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Double));
        group_spec.insert("LOCK_TIME_STEP".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Bool));
        group_spec.insert("RESTRICT_TIME_STEP".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Bool));
        group_spec.insert("T_BEGIN".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Double));
        group_spec.insert("T_END".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Double));
        group_spec.insert("T_END_GEOM".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Double));
        group_spec.insert("TIME_SHRINK_FACTOR".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Double));
        group_spec.insert("WALL_INCREMENT".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Int));
        group_spec.insert("WALL_INCREMENT_HT3D".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Int));
        group_spec.insert("TWFIN".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Double));
        namelist_spec.insert("TIME".to_string(), group_spec);
    }
    {
        let mut group_spec = HashMap::new();
        group_spec.insert("CSVFILE".to_string(), ParameterSpec::Atom(ParameterSpecAtom::String));
        group_spec.insert("UVWFILE".to_string(), ParameterSpec::Atom(ParameterSpecAtom::String));
        namelist_spec.insert("CSVF".to_string(), group_spec);
    }
    {
        let mut group_spec = HashMap::new();
        group_spec.insert("DX".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Double));
        group_spec.insert("DXB".to_string(), ParameterSpec::Array(ParameterSpecAtom::Double));
        group_spec.insert("DX0".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Double));
        group_spec.insert("DY".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Double));
        group_spec.insert("DY0".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Double));
        group_spec.insert("DZ".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Double));
        group_spec.insert("DZ0".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Double));
        group_spec.insert("FYI".to_string(), ParameterSpec::Atom(ParameterSpecAtom::String));
        group_spec.insert("ID".to_string(), ParameterSpec::Atom(ParameterSpecAtom::String));
        group_spec.insert("I_LOWER".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Int));
        group_spec.insert("I_UPPER".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Int));
        group_spec.insert("J_LOWER".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Int));
        group_spec.insert("J_UPPER".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Int));
        group_spec.insert("K_LOWER".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Int));
        group_spec.insert("K_UPPER".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Int));
        group_spec.insert("N_LOWER".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Int));
        group_spec.insert("N_UPPER".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Int));
        namelist_spec.insert("MULT".to_string(), group_spec);
    }
    {
        let mut group_spec = HashMap::new();
        group_spec.insert("AGGLOMERATION".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Bool));
        group_spec.insert("AEROSOL_AL2O3".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Bool));
        group_spec.insert("ALLOW_SURFACE_PARTICLES".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Bool));
        group_spec.insert("ALLOW_UNDERSIDE_PARTICLES".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Bool));
        group_spec.insert("ASSUMED_GAS_TEMPERATURE".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Double));
        group_spec.insert("ASSUMED_GAS_TEMPERATURE_RAMP".to_string(), ParameterSpec::Atom(ParameterSpecAtom::String));
        group_spec.insert("BAROCLINIC".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Bool));
        group_spec.insert("BNDF_DEFAULT".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Bool));
        group_spec.insert("CC_IBM".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Bool));
        group_spec.insert("CNF_CUTOFF".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Double));
        group_spec.insert("CFL_MAX".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Double));
        group_spec.insert("CFL_MIN".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Double));
        group_spec.insert("CFL_VELOCITY_NORM".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Int));
        group_spec.insert("CHECK_HT".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Bool));
        group_spec.insert("CHECK_REALIZABILITY".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Bool));
        group_spec.insert("CHECK_VN".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Bool));
        group_spec.insert("CLIP_MASS_FRACTION".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Bool));
        group_spec.insert("COMPUTE_VISCOSITY_TWICE".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Bool));
        group_spec.insert("COMPUTE_ZETA_SOURCE_TERM".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Bool));
        group_spec.insert("CONSTANT_H_SOLID".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Bool));
        group_spec.insert("CONSTANT_SPECIFIC_HEAT_RATIO".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Bool));
        group_spec.insert("CORIOLIS_VECTOR".to_string(), ParameterSpec::Array(ParameterSpecAtom::Double));
        group_spec.insert("CORRECT_SUBGRID_TEMPERATURE".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Bool));
        group_spec.insert("COUPLED_1D3D_HEAT_TRANSFER".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Bool));
        group_spec.insert("C_DEARDORFF".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Double));
        group_spec.insert("C_RNG".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Double));
        group_spec.insert("C_RNG_CUTOFF".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Double));
        group_spec.insert("C_SMAGORINSKY".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Double));
        group_spec.insert("C_VREMAN".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Double));
        group_spec.insert("DNS".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Bool));
        group_spec.insert("DRAG_CFL_MAX".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Double));
        group_spec.insert("DT_MEAN_FORCING".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Double));
        group_spec.insert("ENTHALPY_TRANSPORT".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Bool));
        group_spec.insert("EVACUATION_DRILL".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Bool));
        group_spec.insert("EVACUATION_MC_MODE".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Bool));
        group_spec.insert("EVAC_PRESSURE_ITERATIONS".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Int));
        group_spec.insert("EVAC_SURF_DEFAULT".to_string(), ParameterSpec::Atom(ParameterSpecAtom::String));
        group_spec.insert("EVAC_TIME_ITERATIONS".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Int));
        group_spec.insert("EVAPORATION".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Bool));
        // group_spec.insert("EXCHANGE_EDGES".to_string(), ParameterSpec::Atom(ParameterSpecAtom::String));
        group_spec.insert("EXTERNAL_BOUNDARY_CORRECTION".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Bool));
        group_spec.insert("EXTINCTION_MODEL".to_string(), ParameterSpec::Atom(ParameterSpecAtom::String));
        group_spec.insert("HVAC_PRES_RELAX".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Double));
        group_spec.insert("HT3D_TEST".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Int));
        group_spec.insert("FDS5_OPTIONS".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Bool));
        group_spec.insert("FLUX_LIMITER".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Int));
        group_spec.insert("FORCE_VECTOR".to_string(), ParameterSpec::Array(ParameterSpecAtom::Double));
        group_spec.insert("FREEZE_VELOCITY".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Bool));
        group_spec.insert("FYI".to_string(), ParameterSpec::Atom(ParameterSpecAtom::String));
        group_spec.insert("GAMMA".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Double));
        group_spec.insert("GRAVITATIONAL_DEPOSITION".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Bool));
        group_spec.insert("GRAVITATIONAL_SETTLING".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Bool));
        group_spec.insert("GROUND_LEVEL".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Double));
        group_spec.insert("GVEC".to_string(), ParameterSpec::Array(ParameterSpecAtom::Double));
        group_spec.insert("DT_HVAC".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Double));
        group_spec.insert("H_F_REFERENCE_TEMPERATURE".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Double));
        group_spec.insert("HRRPUV_MAX_SMV".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Double));
        group_spec.insert("HUMIDITY".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Double));
        group_spec.insert("HVAC_MASS_TRANSPORT".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Bool));
        group_spec.insert("IBLANK_SMV".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Bool));
        group_spec.insert("IMMERSED_BOUNDARY_METHOD".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Int));
        group_spec.insert("INITIAL_UNMIXED_FRACTION".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Double));
        // group_spec.insert("KINETIC_ENERGY_SOURCE".to_string(), ParameterSpec::Atom(ParameterSpecAtom::String));
        group_spec.insert("LAPSE_RATE".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Double));
        group_spec.insert("LES_FILTER_WIDTH".to_string(), ParameterSpec::Atom(ParameterSpecAtom::String));
        group_spec.insert("MAX_CHEMISTRY_ITERATIONS".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Int));
        group_spec.insert("MAX_LEAK_PATHS".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Int));
        group_spec.insert("MAXIMUM_VISIBILITY".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Double));
        group_spec.insert("MEAN_FORCING".to_string(), ParameterSpec::Array(ParameterSpecAtom::Bool));
        group_spec.insert("MPI_TIMEOUT".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Double));
        group_spec.insert("N_FIXED_CHEMISTRY_SUBSTEPS".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Int));
        group_spec.insert("NEAR_WALL_TURBULENCE_MODEL".to_string(), ParameterSpec::Atom(ParameterSpecAtom::String));
        // group_spec.insert("NEW_MOMENTUM_NUDGING".to_string(), ParameterSpec::Atom(ParameterSpecAtom::String));
        // group_spec.insert("NEW_OPEN_BOUNDARY".to_string(), ParameterSpec::Atom(ParameterSpecAtom::String));
        group_spec.insert("NOISE".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Bool));
        group_spec.insert("NOISE_VELOCITY".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Double));
        group_spec.insert("NO_EVACUATION".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Bool));
        group_spec.insert("NO_RAMPS".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Bool));
        // group_spec.insert("NORTHANGLE".to_string(), ParameterSpec::Atom(ParameterSpecAtom::String));
        group_spec.insert("OVERWRITE".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Bool));
        group_spec.insert("PARTICLE_CFL_MAX".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Double));
        group_spec.insert("PARTICLE_CFL_MIN".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Double));
        group_spec.insert("PARTICLE_CFL".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Bool));
        group_spec.insert("PERIODIC_TEST".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Int));
        // group_spec.insert("PROFILING".to_string(), ParameterSpec::Atom(ParameterSpecAtom::String));
        group_spec.insert("POROUS_FLOOR".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Bool));
        // group_spec.insert("POTENTIAL_TEMPERATURE_CORRECTION".to_string(), ParameterSpec::Atom(ParameterSpecAtom::String));
        group_spec.insert("PR".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Double));
        group_spec.insert("PROCESS_ALL_MESHES".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Bool));
        group_spec.insert("PROJECTION".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Bool));
        group_spec.insert("P_INF".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Double));
        // group_spec.insert("RAMP_FVX_T".to_string(), ParameterSpec::Atom(ParameterSpecAtom::String));
        // group_spec.insert("RAMP_FVY_T".to_string(), ParameterSpec::Atom(ParameterSpecAtom::String));
        // group_spec.insert("RAMP_FVZ_T".to_string(), ParameterSpec::Atom(ParameterSpecAtom::String));
        group_spec.insert("RAMP_GX".to_string(), ParameterSpec::Atom(ParameterSpecAtom::String));
        group_spec.insert("RAMP_GY".to_string(), ParameterSpec::Atom(ParameterSpecAtom::String));
        group_spec.insert("RAMP_GZ".to_string(), ParameterSpec::Atom(ParameterSpecAtom::String));
        group_spec.insert("RAMP_U0".to_string(), ParameterSpec::Atom(ParameterSpecAtom::String));
        group_spec.insert("RAMP_U0_T".to_string(), ParameterSpec::Atom(ParameterSpecAtom::String));
        group_spec.insert("RAMP_V0".to_string(), ParameterSpec::Atom(ParameterSpecAtom::String));
        group_spec.insert("RAMP_V0_T".to_string(), ParameterSpec::Atom(ParameterSpecAtom::String));
        group_spec.insert("RAMP_W0".to_string(), ParameterSpec::Atom(ParameterSpecAtom::String));
        group_spec.insert("RAMP_W0_T".to_string(), ParameterSpec::Atom(ParameterSpecAtom::String));
        group_spec.insert("RAMP_U0_Z".to_string(), ParameterSpec::Atom(ParameterSpecAtom::String));
        group_spec.insert("RAMP_V0_Z".to_string(), ParameterSpec::Atom(ParameterSpecAtom::String));
        group_spec.insert("RAMP_W0_Z".to_string(), ParameterSpec::Atom(ParameterSpecAtom::String));
        // group_spec.insert("RADIATION".to_string(), ParameterSpec::Atom(ParameterSpecAtom::String));
        group_spec.insert("RESEARCH_MODE".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Bool));
        group_spec.insert("RESTART".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Bool));
        group_spec.insert("RESTART_CHID".to_string(), ParameterSpec::Atom(ParameterSpecAtom::String));
        group_spec.insert("RICHARDSON_ERROR_TOLERANCE".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Double));
        group_spec.insert("RUN_AVG_FAC".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Double));
        group_spec.insert("SC".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Double));
        group_spec.insert("SECOND_ORDER_INTERPOLATED_BOUNDARY".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Bool));
        group_spec.insert("SECOND_ORDER_PARTICLE_TRANSPORT".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Bool));
        group_spec.insert("SHARED_FILE_SYSTEM".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Bool));
        // group_spec.insert("SLIP_CONDITION".to_string(), ParameterSpec::Atom(ParameterSpecAtom::String));
        group_spec.insert("SMOKE_ALBEDO".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Double));
        group_spec.insert("SOLID_PHASE_ONLY".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Bool));
        // group_spec.insert("SOOT_OXIDATION".to_string(), ParameterSpec::Atom(ParameterSpecAtom::String));
        // group_spec.insert("SPONGE_LAYER_DISTANCE".to_string(), ParameterSpec::Atom(ParameterSpecAtom::String));
        group_spec.insert("STRATIFICATION".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Bool));
        group_spec.insert("SUPPRESSION".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Bool));
        // group_spec.insert("SURF_DEFAULT".to_string(), ParameterSpec::Atom(ParameterSpecAtom::String));
        // group_spec.insert("TEMPERATURE_DEPENDENT_REACTION".to_string(), ParameterSpec::Atom(ParameterSpecAtom::String));
        // group_spec.insert("TENSOR_DIFFUSIVITY".to_string(), ParameterSpec::Atom(ParameterSpecAtom::String));
        group_spec.insert("TERRAIN_CASE".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Bool));
        group_spec.insert("TERRAIN_IMAGE".to_string(), ParameterSpec::Atom(ParameterSpecAtom::String));
        // group_spec.insert("TEST_FILTER_QUADRATURE".to_string(), ParameterSpec::Atom(ParameterSpecAtom::String));
        group_spec.insert("TEXTURE_ORIGIN".to_string(), ParameterSpec::Array(ParameterSpecAtom::Double));
        group_spec.insert("THERMOPHORETIC_DEPOSITION".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Bool));
        group_spec.insert("THICKEN_OBSTRUCTIONS".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Bool));
        // group_spec.insert("TRANSPORT_UNMIXED_FRACTION".to_string(), ParameterSpec::Atom(ParameterSpecAtom::String));
        // group_spec.insert("TRANSPORT_ZETA_SCHEME".to_string(), ParameterSpec::Atom(ParameterSpecAtom::String));
        group_spec.insert("TMPA".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Double));
        group_spec.insert("TURBULENCE_MODEL".to_string(), ParameterSpec::Atom(ParameterSpecAtom::String));
        group_spec.insert("TURBULENT_DEPOSITION".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Bool));
        // group_spec.insert("TURB_INIT_CLOCK".to_string(), ParameterSpec::Atom(ParameterSpecAtom::String));
        group_spec.insert("U0".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Double));
        group_spec.insert("UVW_FILE".to_string(), ParameterSpec::Atom(ParameterSpecAtom::String));
        group_spec.insert("V0".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Double));
        group_spec.insert("VEG_LEVEL_SET_COUPLED".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Bool));
        group_spec.insert("VEG_LEVEL_SET_UNCOUPLED".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Bool));
        group_spec.insert("VERBOSE".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Double));
        group_spec.insert("VISIBILITY_FACTOR".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Double));
        group_spec.insert("VN_MAX".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Double));
        group_spec.insert("VN_MIN".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Double));
        group_spec.insert("Y_CO2_INFTY".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Double));
        group_spec.insert("Y_O2_INFTY".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Double));
        group_spec.insert("W0".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Double));
        // group_spec.insert("WD_PROPS".to_string(), ParameterSpec::Atom(ParameterSpecAtom::String));
        // group_spec.insert("WIND_BOUNDARY".to_string(), ParameterSpec::Atom(ParameterSpecAtom::String));
        // group_spec.insert("WIND_ONLY".to_string(), ParameterSpec::Atom(ParameterSpecAtom::String));
        namelist_spec.insert("MISC".to_string(), group_spec);
    }
    {
        let mut group_spec = HashMap::new();
        group_spec.insert("CLIP_RESTART_FILES".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Bool));
        group_spec.insert("COLUMN_DUMP_LIMIT".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Bool));
        group_spec.insert("CTRL_COLUMN_LIMIT".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Int));
        group_spec.insert("DEVC_COLUMN_LIMIT".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Int));
        group_spec.insert("DT_BNDE".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Double));
        group_spec.insert("DT_BNDF".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Double));
        group_spec.insert("DT_CPU".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Double));
        group_spec.insert("DT_CTRL".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Double));
        group_spec.insert("DT_DEVC".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Double));
        group_spec.insert("DT_DEVC_LINE".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Double));
        group_spec.insert("DT_FLUSH".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Double));
        group_spec.insert("DT_GEOM".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Double));
        group_spec.insert("DT_HRR".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Double));
        group_spec.insert("DT_ISOF".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Double));
        group_spec.insert("DT_MASS".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Double));
        group_spec.insert("DT_PART".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Double));
        group_spec.insert("DT_PL3D".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Double));
        group_spec.insert("DT_PROF".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Double));
        group_spec.insert("DT_RESTART".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Double));
        group_spec.insert("DT_SL3D".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Double));
        group_spec.insert("DT_SLCF".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Double));
        group_spec.insert("EB_PART_FILE".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Bool));
        group_spec.insert("FLUSH_FILE_BUFFERS".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Bool));
        group_spec.insert("GEOM_DIAG".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Bool));
        group_spec.insert("MASS_FILE".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Bool));
        group_spec.insert("MAXIMUM_PARTICLES".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Int));
        group_spec.insert("MMS_TIMER".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Double));
        group_spec.insert("NFRAMES".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Int));
        group_spec.insert("PLOT3D_PART_ID".to_string(), ParameterSpec::Array(ParameterSpecAtom::String));
        group_spec.insert("PLOT3D_QUANTITY".to_string(), ParameterSpec::Array(ParameterSpecAtom::String));
        group_spec.insert("PLOT3D_SPEC_ID".to_string(), ParameterSpec::Array(ParameterSpecAtom::String));
        group_spec.insert("PLOT3D_VELO_INDEX".to_string(), ParameterSpec::Array(ParameterSpecAtom::Int));
        group_spec.insert("RENDER_FILE".to_string(), ParameterSpec::Atom(ParameterSpecAtom::String));
        group_spec.insert("SIG_FIGS".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Int));
        group_spec.insert("SIG_FIGS_EXP".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Int));
        group_spec.insert("SMOKE3D".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Bool));
        group_spec.insert("SMOKE3D_QUANTITY".to_string(), ParameterSpec::Atom(ParameterSpecAtom::String));
        group_spec.insert("SMOKE3D_SPEC_ID".to_string(), ParameterSpec::Atom(ParameterSpecAtom::String));
        group_spec.insert("STATUS_FILES".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Bool));
        group_spec.insert("SUPPRESS_DIAGNOSTICS".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Bool));
        group_spec.insert("UVW_TIMER".to_string(), ParameterSpec::Array(ParameterSpecAtom::Double));
        group_spec.insert("VELOCITY_ERROR_FILE".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Bool));
        group_spec.insert("WRITE_XYZ".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Bool));
        namelist_spec.insert("DUMP".to_string(), group_spec);
    }
    {
        let mut group_spec = HashMap::new();
        group_spec.insert("AEROSOL".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Bool));
        group_spec.insert("ALIAS".to_string(), ParameterSpec::Atom(ParameterSpecAtom::String));
        group_spec.insert("BACKGROUND".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Bool));
        // group_spec.insert("COPY_LUMPED".to_string(), ParameterSpec::Atom(ParameterSpecAtom::String));
        group_spec.insert("CONDUCTIVITY".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Double));
        group_spec.insert("CONDUCTIVITY_SOLID".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Double));
        group_spec.insert("DENSITY_LIQUID".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Double));
        group_spec.insert("DENSITY_SOLID".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Double));
        group_spec.insert("DIFFUSIVITY".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Double));
        group_spec.insert("ENTHALPY_OF_FORMATION".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Double));
        group_spec.insert("EPSILONKLJ".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Double));
        group_spec.insert("FIC_CONCENTRATION".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Double));
        group_spec.insert("FLD_LETHAL_DOSE".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Double));
        group_spec.insert("FORMULA".to_string(), ParameterSpec::Atom(ParameterSpecAtom::String));
        group_spec.insert("FYI".to_string(), ParameterSpec::Atom(ParameterSpecAtom::String));
        group_spec.insert("HEAT_OF_VAPORIZATION".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Double));
        group_spec.insert("H_V_REFERENCE_TEMPERATURE".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Double));
        group_spec.insert("ID".to_string(), ParameterSpec::Atom(ParameterSpecAtom::String));
        group_spec.insert("LUMPED_COMPONENT_ONLY".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Bool));
        group_spec.insert("MASS_EXTINCTION_COEFFICIENT".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Double));
        group_spec.insert("MASS_FRACTION".to_string(), ParameterSpec::Array(ParameterSpecAtom::Double));
        group_spec.insert("MASS_FRACTION_0".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Double));
        // group_spec.insert("MAX_DIAMETER".to_string(), ParameterSpec::Atom(ParameterSpecAtom::String));
        group_spec.insert("MEAN_DIAMETER".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Double));
        group_spec.insert("MELTING_TEMPERATURE".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Double));
        // group_spec.insert("MIN_DIAMETER".to_string(), ParameterSpec::Atom(ParameterSpecAtom::String));
        group_spec.insert("MW".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Double));
        // group_spec.insert("N_BINS".to_string(), ParameterSpec::Atom(ParameterSpecAtom::String));
        group_spec.insert("PR_GAS".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Double));
        group_spec.insert("PRIMITIVE".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Bool));
        group_spec.insert("RADCAL_ID".to_string(), ParameterSpec::Atom(ParameterSpecAtom::String));
        group_spec.insert("RAMP_CP".to_string(), ParameterSpec::Atom(ParameterSpecAtom::String));
        group_spec.insert("RAMP_CP_L".to_string(), ParameterSpec::Atom(ParameterSpecAtom::String));
        group_spec.insert("RAMP_D".to_string(), ParameterSpec::Atom(ParameterSpecAtom::String));
        group_spec.insert("RAMP_G_F".to_string(), ParameterSpec::Atom(ParameterSpecAtom::String));
        group_spec.insert("RAMP_K".to_string(), ParameterSpec::Atom(ParameterSpecAtom::String));
        group_spec.insert("RAMP_MU".to_string(), ParameterSpec::Atom(ParameterSpecAtom::String));
        group_spec.insert("REFERENCE_ENTHALPY".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Double));
        group_spec.insert("REFERENCE_TEMPERATURE".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Double));
        group_spec.insert("SIGMALJ".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Double));
        group_spec.insert("SPEC_ID".to_string(), ParameterSpec::Array(ParameterSpecAtom::String));
        group_spec.insert("SPECIFIC_HEAT".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Double));
        group_spec.insert("SPECIFIC_HEAT_LIQUID".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Double));
        group_spec.insert("VAPORIZATION_TEMPERATURE".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Double));
        group_spec.insert("VISCOSITY".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Double));
        group_spec.insert("VOLUME_FRACTION".to_string(), ParameterSpec::Array(ParameterSpecAtom::Double));
        namelist_spec.insert("SPEC".to_string(), group_spec);
    }
    {
        let mut group_spec = HashMap::new();
        group_spec.insert("A".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Double));
        // group_spec.insert("ALT_REAC_ID".to_string(), ParameterSpec::Atom(ParameterSpecAtom::String));
        group_spec.insert("AUTO_IGNITION_TEMPERATURE".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Double));
        group_spec.insert("C".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Double));
        group_spec.insert("CHECK_ATOM_BALANCE".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Bool));
        group_spec.insert("CO_YIELD".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Double));
        group_spec.insert("CRITICAL_FLAME_TEMPERATURE".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Double));
        group_spec.insert("E".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Double));
        group_spec.insert("EPUMO2".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Double));
        // group_spec.insert("K".to_string(), ParameterSpec::Atom(ParameterSpecAtom::String));
        group_spec.insert("EQUATION".to_string(), ParameterSpec::Atom(ParameterSpecAtom::String));
        group_spec.insert("FIXED_MIX_TIME".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Double));
        // group_spec.insert("FLAME_SPEED".to_string(), ParameterSpec::Atom(ParameterSpecAtom::String));
        // group_spec.insert("FLAME_SPEED_EXPONENT".to_string(), ParameterSpec::Atom(ParameterSpecAtom::String));
        // group_spec.insert("FLAME_SPEED_TEMPERATURE".to_string(), ParameterSpec::Atom(ParameterSpecAtom::String));
        group_spec.insert("FORMULA".to_string(), ParameterSpec::Atom(ParameterSpecAtom::String));
        group_spec.insert("FUEL".to_string(), ParameterSpec::Atom(ParameterSpecAtom::String));
        group_spec.insert("FUEL_RADCAL_ID".to_string(), ParameterSpec::Atom(ParameterSpecAtom::String));
        // group_spec.insert("FWD_ID".to_string(), ParameterSpec::Atom(ParameterSpecAtom::String));
        group_spec.insert("FYI".to_string(), ParameterSpec::Atom(ParameterSpecAtom::String));
        group_spec.insert("H".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Double));
        group_spec.insert("HEAT_OF_COMBUSTION".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Double));
        group_spec.insert("ID".to_string(), ParameterSpec::Atom(ParameterSpecAtom::String));
        group_spec.insert("IDEAL".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Bool));
        group_spec.insert("N".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Double));
        group_spec.insert("NU".to_string(), ParameterSpec::Array(ParameterSpecAtom::Double));
        group_spec.insert("N_S".to_string(), ParameterSpec::Array(ParameterSpecAtom::Double));
        group_spec.insert("N_T".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Double));
        group_spec.insert("O".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Double));
        // group_spec.insert("ODE_SOLVER".to_string(), ParameterSpec::Atom(ParameterSpecAtom::String));
        group_spec.insert("RADIATIVE_FRACTION".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Double));
        group_spec.insert("RAMP_CHI_R".to_string(), ParameterSpec::Atom(ParameterSpecAtom::String));
        // group_spec.insert("RAMP_FS".to_string(), ParameterSpec::Atom(ParameterSpecAtom::String));
        group_spec.insert("REAC_ATOM_ERROR".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Double));
        group_spec.insert("REAC_MASS_ERROR".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Double));
        // group_spec.insert("REVERSE".to_string(), ParameterSpec::Atom(ParameterSpecAtom::String));
        group_spec.insert("SOOT_H_FRACTION".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Double));
        group_spec.insert("SOOT_YIELD".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Double));
        group_spec.insert("SPEC_ID_N_S".to_string(), ParameterSpec::Array(ParameterSpecAtom::String));
        group_spec.insert("SPEC_ID_NU".to_string(), ParameterSpec::Array(ParameterSpecAtom::String));
        // group_spec.insert("TABLE_FS".to_string(), ParameterSpec::Atom(ParameterSpecAtom::String));
        // group_spec.insert("TAU_CHEM".to_string(), ParameterSpec::Atom(ParameterSpecAtom::String));
        // group_spec.insert("TAU_FLAME".to_string(), ParameterSpec::Atom(ParameterSpecAtom::String));
        group_spec.insert("THIRD_BODY".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Bool));
        // group_spec.insert("TURBULENT_FLAME_SPEED_ALPHA".to_string(), ParameterSpec::Atom(ParameterSpecAtom::String));
        // group_spec.insert("TURBULENT_FLAME_SPEED_EXPONENT".to_string(), ParameterSpec::Atom(ParameterSpecAtom::String));
        // group_spec.insert("Y_P_MIN_EDC".to_string(), ParameterSpec::Atom(ParameterSpecAtom::String));
        namelist_spec.insert("REAC".to_string(), group_spec);
    }
    {
        let mut group_spec = HashMap::new();
        group_spec.insert("AGE".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Double));
        group_spec.insert("BREAKUP".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Bool));
        group_spec.insert("BREAKUP_CNF_RAMP_ID".to_string(), ParameterSpec::Atom(ParameterSpecAtom::String));
        group_spec.insert("BREAKUP_DISTRIBUTION".to_string(), ParameterSpec::Atom(ParameterSpecAtom::String));
        group_spec.insert("BREAKUP_GAMMA_D".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Double));
        group_spec.insert("BREAKUP_RATIO".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Double));
        group_spec.insert("BREAKUP_SIGMA_D".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Double));
        group_spec.insert("CHECK_DISTRIBUTION".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Bool));
        group_spec.insert("CNF_RAMP_ID".to_string(), ParameterSpec::Atom(ParameterSpecAtom::String));
        group_spec.insert("COLOR".to_string(), ParameterSpec::Atom(ParameterSpecAtom::String));
        group_spec.insert("COMPLEX_REFRACTIVE_INDEX".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Double));
        group_spec.insert("CTRL_ID".to_string(), ParameterSpec::Atom(ParameterSpecAtom::String));
        group_spec.insert("DENSE_VOLUME_FRACTION".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Double));
        group_spec.insert("DEVC_ID".to_string(), ParameterSpec::Atom(ParameterSpecAtom::String));
        group_spec.insert("DIAMETER".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Double));
        group_spec.insert("DISTRIBUTION".to_string(), ParameterSpec::Atom(ParameterSpecAtom::String));
        group_spec.insert("DRAG_COEFFICIENT".to_string(), ParameterSpec::Array(ParameterSpecAtom::Double));
        group_spec.insert("DRAG_LAW".to_string(), ParameterSpec::Atom(ParameterSpecAtom::String));
        group_spec.insert("FREE_AREA_FRACTION".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Double));
        group_spec.insert("FYI".to_string(), ParameterSpec::Atom(ParameterSpecAtom::String));
        group_spec.insert("GAMMA_D".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Double));
        group_spec.insert("HEAT_OF_COMBUSTION".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Double));
        group_spec.insert("HORIZONTAL_VELOCITY".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Double));
        group_spec.insert("ID".to_string(), ParameterSpec::Atom(ParameterSpecAtom::String));
        group_spec.insert("INITIAL_TEMPERATURE".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Double));
        group_spec.insert("MASSLESS".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Bool));
        group_spec.insert("MAXIMUM_DIAMETER".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Double));
        group_spec.insert("MINIMUM_DIAMETER".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Double));
        group_spec.insert("MONODISPERSE".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Bool));
        group_spec.insert("N_STRATA".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Int));
        group_spec.insert("ORIENTATION".to_string(), ParameterSpec::Array(ParameterSpecAtom::Double));
        group_spec.insert("PERMEABILITY".to_string(), ParameterSpec::Array(ParameterSpecAtom::Double));
        // group_spec.insert("PERIODIC_X".to_string(), ParameterSpec::Atom(ParameterSpecAtom::String));
        // group_spec.insert("PERIODIC_Y".to_string(), ParameterSpec::Atom(ParameterSpecAtom::String));
        // group_spec.insert("PERIODIC_Z".to_string(), ParameterSpec::Atom(ParameterSpecAtom::String));
        group_spec.insert("POROUS_VOLUME_FRACTION".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Double));
        group_spec.insert("PROP_ID".to_string(), ParameterSpec::Atom(ParameterSpecAtom::String));
        group_spec.insert("QUANTITIES".to_string(), ParameterSpec::Array(ParameterSpecAtom::String));
        group_spec.insert("QUANTITIES_SPEC_ID".to_string(), ParameterSpec::Array(ParameterSpecAtom::String));
        group_spec.insert("RADIATIVE_PROPERTY_TABLE".to_string(), ParameterSpec::Atom(ParameterSpecAtom::String));
        group_spec.insert("REAL_REFRACTIVE_INDEX".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Double));
        group_spec.insert("RGB".to_string(), ParameterSpec::Array(ParameterSpecAtom::Double));
        group_spec.insert("SAMPLING_FACTOR".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Int));
        group_spec.insert("SECOND_ORDER_PARTICLE_TRANSPORT".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Bool));
        group_spec.insert("SIGMA_D".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Double));
        group_spec.insert("SPEC_ID".to_string(), ParameterSpec::Atom(ParameterSpecAtom::String));
        group_spec.insert("STATIC".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Bool));
        group_spec.insert("SURFACE_TENSION".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Double));
        group_spec.insert("SURF_ID".to_string(), ParameterSpec::Atom(ParameterSpecAtom::String));
        group_spec.insert("TARGET_ONLY".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Bool));
        group_spec.insert("TURBULENT_DISPERSION".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Bool));
        group_spec.insert("VERTICAL_VELOCITY".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Double));
        namelist_spec.insert("PART".to_string(), group_spec);
    }
    {
        let mut group_spec = HashMap::new();
        group_spec.insert("ACTIVATION_OBSCURATION".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Double));
        group_spec.insert("ACTIVATION_TEMPERATURE".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Double));
        group_spec.insert("ALPHA_C".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Double));
        group_spec.insert("ALPHA_E".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Double));
        group_spec.insert("BEAD_DENSITY".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Double));
        group_spec.insert("BEAD_DIAMETER".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Double));
        group_spec.insert("BEAD_EMISSIVITY".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Double));
        group_spec.insert("BEAD_HEAT_TRANSFER_COEFFICIENT".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Double));
        group_spec.insert("BEAD_SPECIFIC_HEAT".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Double));
        group_spec.insert("BETA_C".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Double));
        group_spec.insert("BETA_E".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Double));
        // group_spec.insert("FED_ACTIVITY".to_string(), ParameterSpec::Atom(ParameterSpecAtom::String));
        group_spec.insert("CHARACTERISTIC_VELOCITY".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Double));
        group_spec.insert("C_FACTOR".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Double));
        group_spec.insert("DENSITY".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Double));
        group_spec.insert("DIAMETER".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Double));
        group_spec.insert("DROPLET_VELOCITY".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Double));
        group_spec.insert("EMISSIVITY".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Double));
        group_spec.insert("FLOW_RAMP".to_string(), ParameterSpec::Atom(ParameterSpecAtom::String));
        group_spec.insert("FLOW_RATE".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Double));
        group_spec.insert("FLOW_TAU".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Double));
        group_spec.insert("GAUGE_EMISSIVITY".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Double));
        group_spec.insert("GAUGE_TEMPERATURE".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Double));
        group_spec.insert("HEAT_TRANSFER_COEFFICIENT".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Double));
        group_spec.insert("ID".to_string(), ParameterSpec::Atom(ParameterSpecAtom::String));
        group_spec.insert("INITIAL_TEMPERATURE".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Double));
        group_spec.insert("K_FACTOR".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Double));
        group_spec.insert("LENGTH".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Double));
        group_spec.insert("MASS_FLOW_RATE".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Double));
        group_spec.insert("OFFSET".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Double));
        group_spec.insert("OPERATING_PRESSURE".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Double));
        group_spec.insert("ORIFICE_DIAMETER".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Double));
        group_spec.insert("P0".to_string(), ParameterSpec::Atom(ParameterSpecAtom::String));
        group_spec.insert("PARTICLES_PER_SECOND".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Int));
        group_spec.insert("PARTICLE_VELOCITY".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Double));
        group_spec.insert("PART_ID".to_string(), ParameterSpec::Atom(ParameterSpecAtom::String));
        group_spec.insert("PDPA_END".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Double));
        group_spec.insert("PDPA_HISTOGRAM".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Bool));
        group_spec.insert("PDPA_HISTOGRAM_LIMITS".to_string(), ParameterSpec::Array(ParameterSpecAtom::Double));
        group_spec.insert("PDPA_HISTOGRAM_NBINS".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Int));
        group_spec.insert("PDPA_HISTOGRAM_CUMULATIVE".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Bool));
        group_spec.insert("PDPA_INTEGRATE".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Bool));
        group_spec.insert("PDPA_M".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Int));
        group_spec.insert("PDPA_N".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Int));
        group_spec.insert("PDPA_NORMALIZE".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Bool));
        group_spec.insert("PDPA_RADIUS".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Double));
        group_spec.insert("PDPA_START".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Double));
        group_spec.insert("PRESSURE_RAMP".to_string(), ParameterSpec::Atom(ParameterSpecAtom::String));
        // group_spec.insert("PX".to_string(), ParameterSpec::Atom(ParameterSpecAtom::String));
        // group_spec.insert("PXX".to_string(), ParameterSpec::Atom(ParameterSpecAtom::String));
        group_spec.insert("QUANTITY".to_string(), ParameterSpec::Atom(ParameterSpecAtom::String));
        group_spec.insert("RTI".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Double));
        group_spec.insert("SMOKEVIEW_ID".to_string(), ParameterSpec::Array(ParameterSpecAtom::String));
        group_spec.insert("SMOKEVIEW_PARAMETERS".to_string(), ParameterSpec::Array(ParameterSpecAtom::String));
        group_spec.insert("SPEC_ID".to_string(), ParameterSpec::Atom(ParameterSpecAtom::String));
        group_spec.insert("SPRAY_ANGLE".to_string(), ParameterSpec::Array(ParameterSpecAtom::Double));
        group_spec.insert("SPRAY_PATTERN_BETA".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Double));
        group_spec.insert("SPRAY_PATTERN_MU".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Double));
        group_spec.insert("SPRAY_PATTERN_SHAPE".to_string(), ParameterSpec::Atom(ParameterSpecAtom::String));
        group_spec.insert("SPRAY_PATTERN_TABLE".to_string(), ParameterSpec::Atom(ParameterSpecAtom::String));
        group_spec.insert("VELOCITY_COMPONENT".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Int));
        // group_spec.insert("DROPLET_VELOCITY".to_string(), ParameterSpec::Atom(ParameterSpecAtom::String));
        namelist_spec.insert("PROP".to_string(), group_spec);
    }
    {
        let mut group_spec = HashMap::new();
        group_spec.insert("A".to_string(), ParameterSpec::Array(ParameterSpecAtom::Double));
        group_spec.insert("ABSORPTION_COEFFICIENT".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Double));
        group_spec.insert("BOILING_TEMPERATURE".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Double));
        group_spec.insert("COLOR".to_string(), ParameterSpec::Atom(ParameterSpecAtom::String));
        group_spec.insert("CONDUCTIVITY".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Double));
        group_spec.insert("CONDUCTIVITY_RAMP".to_string(), ParameterSpec::Atom(ParameterSpecAtom::String));
        group_spec.insert("DENSITY".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Double));
        group_spec.insert("E".to_string(), ParameterSpec::Array(ParameterSpecAtom::Double));
        group_spec.insert("EMISSIVITY".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Double));
        group_spec.insert("FYI".to_string(), ParameterSpec::Atom(ParameterSpecAtom::String));
        group_spec.insert("HEATING_RATE".to_string(), ParameterSpec::Array(ParameterSpecAtom::Double));
        group_spec.insert("HEAT_OF_COMBUSTION".to_string(), ParameterSpec::Array(ParameterSpecAtom::Double));
        group_spec.insert("HEAT_OF_REACTION".to_string(), ParameterSpec::Array(ParameterSpecAtom::Double));
        group_spec.insert("ID".to_string(), ParameterSpec::Atom(ParameterSpecAtom::String));
        group_spec.insert("MATL_ID".to_string(), ParameterSpec::Array(ParameterSpecAtom::String));
        group_spec.insert("NU_MATL".to_string(), ParameterSpec::Array(ParameterSpecAtom::Double));
        group_spec.insert("NU_SPEC".to_string(), ParameterSpec::Array(ParameterSpecAtom::Double));
        group_spec.insert("N_REACTIONS".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Int));
        group_spec.insert("N_S".to_string(), ParameterSpec::Array(ParameterSpecAtom::Double));
        group_spec.insert("N_T".to_string(), ParameterSpec::Array(ParameterSpecAtom::Double));
        group_spec.insert("N_O2".to_string(), ParameterSpec::Array(ParameterSpecAtom::Double));
        group_spec.insert("PCR".to_string(), ParameterSpec::Array(ParameterSpecAtom::Bool));
        group_spec.insert("PYROLYSIS_RANGE".to_string(), ParameterSpec::Array(ParameterSpecAtom::Double));
        group_spec.insert("REFERENCE_RATE".to_string(), ParameterSpec::Array(ParameterSpecAtom::Double));
        group_spec.insert("REFERENCE_TEMPERATURE".to_string(), ParameterSpec::Array(ParameterSpecAtom::Double));
        group_spec.insert("RGB".to_string(), ParameterSpec::Array(ParameterSpecAtom::Double));
        group_spec.insert("SPECIFIC_HEAT".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Double));
        group_spec.insert("SPECIFIC_HEAT_RAMP".to_string(), ParameterSpec::Atom(ParameterSpecAtom::String));
        group_spec.insert("SPEC_ID".to_string(), ParameterSpec::Array(ParameterSpecAtom::String));
        group_spec.insert("THRESHOLD_SIGN".to_string(), ParameterSpec::Array(ParameterSpecAtom::Double));
        group_spec.insert("THRESHOLD_TEMPERATURE".to_string(), ParameterSpec::Array(ParameterSpecAtom::Double));
        // group_spec.insert("POROSITY".to_string(), ParameterSpec::Atom(ParameterSpecAtom::String));
        group_spec.insert("ALLOW_SHRINKING".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Bool));
        group_spec.insert("ALLOW_SWELLING".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Bool));
        group_spec.insert("GAS_DIFFUSION_DEPTH".to_string(), ParameterSpec::Array(ParameterSpecAtom::Double));
        namelist_spec.insert("MATL".to_string(), group_spec);
    }
    {
        let mut group_spec = HashMap::new();
        group_spec.insert("ADIABATIC".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Bool));
        // group_spec.insert("AUTO_IGNITION_TEMPERATURE".to_string(), ParameterSpec::Atom(ParameterSpecAtom::String));
        group_spec.insert("BACKING".to_string(), ParameterSpec::Atom(ParameterSpecAtom::String));
        group_spec.insert("BURN_AWAY".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Bool));
        group_spec.insert("CELL_SIZE_FACTOR".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Double));
        group_spec.insert("C_FORCED_CONSTANT".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Double));
        group_spec.insert("C_FORCED_PR_EXP".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Double));
        group_spec.insert("C_FORCED_RE".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Double));
        group_spec.insert("C_FORCED_RE_EXP".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Double));
        group_spec.insert("C_HORIZONTAL".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Double));
        group_spec.insert("C_VERTICAL".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Double));
        group_spec.insert("COLOR".to_string(), ParameterSpec::Atom(ParameterSpecAtom::String));
        group_spec.insert("CONVECTION_LENGTH_SCALE".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Double));
        group_spec.insert("CONVECTIVE_HEAT_FLUX".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Double));
        group_spec.insert("CONVERT_VOLUME_TO_MASS".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Bool));
        group_spec.insert("DEFAULT".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Bool));
        group_spec.insert("DT_INSERT".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Double));
        group_spec.insert("EMISSIVITY".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Double));
        group_spec.insert("EMISSIVITY_BACK".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Double));
        group_spec.insert("EVAC_DEFAULT".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Bool));
        group_spec.insert("EXTERNAL_FLUX".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Double));
        group_spec.insert("E_COEFFICIENT".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Double));
        group_spec.insert("FIRELINE_MLR_MAX".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Double));
        group_spec.insert("FREE_SLIP".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Bool));
        group_spec.insert("FYI".to_string(), ParameterSpec::Atom(ParameterSpecAtom::String));
        group_spec.insert("GEOMETRY".to_string(), ParameterSpec::Atom(ParameterSpecAtom::String));
        group_spec.insert("HEAT_OF_VAPORIZATION".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Double));
        group_spec.insert("HEAT_TRANSFER_COEFFICIENT".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Double));
        group_spec.insert("HEAT_TRANSFER_COEFFICIENT_BACK".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Double));
        group_spec.insert("HEAT_TRANSFER_MODEL".to_string(), ParameterSpec::Atom(ParameterSpecAtom::String));
        group_spec.insert("HRRPUA".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Double));
        group_spec.insert("HT3D".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Bool));
        group_spec.insert("ID".to_string(), ParameterSpec::Atom(ParameterSpecAtom::String));
        group_spec.insert("AUTO_IGNITION_TEMPERATURE".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Double));
        group_spec.insert("IGNITION_TEMPERATURE".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Double));
        group_spec.insert("INNER_RADIUS".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Double));
        group_spec.insert("INTERNAL_HEAT_SOURCE".to_string(), ParameterSpec::Array(ParameterSpecAtom::Double));
        group_spec.insert("LAYER_DIVIDE".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Double));
        group_spec.insert("LEAK_PATH".to_string(), ParameterSpec::Array(ParameterSpecAtom::Int));
        group_spec.insert("LENGTH".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Double));
        group_spec.insert("MASS_FLUX".to_string(), ParameterSpec::Array(ParameterSpecAtom::Double));
        group_spec.insert("MASS_FLUX_TOTAL".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Double));
        group_spec.insert("MASS_FLUX_VAR".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Double));
        group_spec.insert("MASS_FRACTION".to_string(), ParameterSpec::Array(ParameterSpecAtom::Double));
        group_spec.insert("MASS_TRANSFER_COEFFICIENT".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Double));
        group_spec.insert("MATL_ID".to_string(), ParameterSpec::Array(ParameterSpecAtom::String));
        group_spec.insert("MATL_MASS_FRACTION".to_string(), ParameterSpec::Array(ParameterSpecAtom::Double));
        group_spec.insert("MINIMUM_LAYER_THICKNESS".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Double));
        group_spec.insert("MLRPUA".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Double));
        // group_spec.insert("N_CELLS_MAX".to_string(), ParameterSpec::Atom(ParameterSpecAtom::String));
        group_spec.insert("N_LAYER_CELLS_MAX".to_string(), ParameterSpec::Array(ParameterSpecAtom::Int));
        group_spec.insert("NET_HEAT_FLUX".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Double));
        group_spec.insert("NO_SLIP".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Bool));
        group_spec.insert("NPPC".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Int));
        group_spec.insert("PARTICLE_MASS_FLUX".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Double));
        group_spec.insert("PART_ID".to_string(), ParameterSpec::Atom(ParameterSpecAtom::String));
        group_spec.insert("PLE".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Double));
        group_spec.insert("PROFILE".to_string(), ParameterSpec::Atom(ParameterSpecAtom::String));
        group_spec.insert("RADIUS".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Double));
        group_spec.insert("RAMP_EF".to_string(), ParameterSpec::Atom(ParameterSpecAtom::String));
        group_spec.insert("RAMP_MF".to_string(), ParameterSpec::Array(ParameterSpecAtom::String));
        group_spec.insert("RAMP_PART".to_string(), ParameterSpec::Atom(ParameterSpecAtom::String));
        group_spec.insert("RAMP_Q".to_string(), ParameterSpec::Atom(ParameterSpecAtom::String));
        group_spec.insert("RAMP_T".to_string(), ParameterSpec::Atom(ParameterSpecAtom::String));
        group_spec.insert("RAMP_T_I".to_string(), ParameterSpec::Atom(ParameterSpecAtom::String));
        group_spec.insert("RAMP_V".to_string(), ParameterSpec::Atom(ParameterSpecAtom::String));
        group_spec.insert("RAMP_V_X".to_string(), ParameterSpec::Atom(ParameterSpecAtom::String));
        group_spec.insert("RAMP_V_Y".to_string(), ParameterSpec::Atom(ParameterSpecAtom::String));
        group_spec.insert("RAMP_V_Z".to_string(), ParameterSpec::Atom(ParameterSpecAtom::String));
        group_spec.insert("RGB".to_string(), ParameterSpec::Array(ParameterSpecAtom::Double));
        group_spec.insert("ROUGHNESS".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Double));
        group_spec.insert("SPEC_ID".to_string(), ParameterSpec::Atom(ParameterSpecAtom::String));
        group_spec.insert("SPREAD_RATE".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Double));
        group_spec.insert("STRETCH_FACTOR".to_string(), ParameterSpec::Array(ParameterSpecAtom::Double));
        group_spec.insert("TAU_EF".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Double));
        group_spec.insert("TAU_MF".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Double));
        group_spec.insert("TAU_PART".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Double));
        group_spec.insert("TAU_Q".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Double));
        group_spec.insert("TAU_T".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Double));
        group_spec.insert("TAU_V".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Double));
        group_spec.insert("TEXTURE_HEIGHT".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Double));
        group_spec.insert("TEXTURE_MAP".to_string(), ParameterSpec::Atom(ParameterSpecAtom::String));
        group_spec.insert("TEXTURE_WIDTH".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Double));
        group_spec.insert("TGA_ANALYSIS".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Bool));
        group_spec.insert("TGA_FINAL_TEMPERATURE".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Double));
        group_spec.insert("TGA_HEATING_RATE".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Double));
        group_spec.insert("THICKNESS".to_string(), ParameterSpec::Array(ParameterSpecAtom::Double));
        group_spec.insert("TMP_BACK".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Double));
        group_spec.insert("TMP_FRONT".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Double));
        group_spec.insert("TMP_INNER".to_string(), ParameterSpec::Array(ParameterSpecAtom::Double));
        group_spec.insert("TRANSPARENCY".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Double));
        group_spec.insert("VEGETATION".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Bool));
        group_spec.insert("VEGETATION_ARRHENIUS_DEGRAD".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Bool));
        group_spec.insert("VEGETATION_CDRAG".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Double));
        group_spec.insert("VEGETATION_CHAR_FRACTION".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Double));
        group_spec.insert("VEGETATION_ELEMENT_DENSITY".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Int));
        group_spec.insert("VEGETATION_GROUND_TEMP".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Double));
        group_spec.insert("VEGETATION_HEIGHT".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Double));
        group_spec.insert("VEGETATION_INITIAL_TEMP".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Double));
        group_spec.insert("VEGETATION_LAYERS".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Int));
        group_spec.insert("VEGETATION_LINEAR_DEGRAD".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Bool));
        group_spec.insert("VEGETATION_LOAD".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Double));
        group_spec.insert("VEGETATION_LSET_IGNITE_TIME".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Double));
        group_spec.insert("VEG_LSET_QCON".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Double));
        group_spec.insert("VEGETATION_MOISTURE".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Double));
        group_spec.insert("VEGETATION_NO_BURN".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Bool));
        group_spec.insert("VEGETATION_SVRATIO".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Int));
        group_spec.insert("VEG_LEVEL_SET_SPREAD".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Bool));
        group_spec.insert("VEG_LSET_ROS_BACK".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Double));
        group_spec.insert("VEG_LSET_ROS_FLANK".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Double));
        group_spec.insert("VEG_LSET_ROS_HEAD".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Double));
        group_spec.insert("VEG_LSET_WIND_EXP".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Double));
        group_spec.insert("VEG_LSET_SIGMA".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Double));
        group_spec.insert("VEG_LSET_HT".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Double));
        group_spec.insert("VEG_LSET_BETA".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Double));
        group_spec.insert("VEG_LSET_ELLIPSE".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Double));
        group_spec.insert("VEG_LSET_TAN2".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Bool));
        group_spec.insert("VEG_LSET_ELLIPSE_HEAD".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Double));
        group_spec.insert("VEL".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Double));
        group_spec.insert("VEL_BULK".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Double));
        group_spec.insert("VEL_GRAD".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Double));
        group_spec.insert("VEL_T".to_string(), ParameterSpec::Array(ParameterSpecAtom::Double));
        group_spec.insert("VOLUME_FLOW".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Double));
        group_spec.insert("WIDTH".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Double));
        group_spec.insert("XYZ".to_string(), ParameterSpec::Array(ParameterSpecAtom::Double));
        group_spec.insert("Z0".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Double));
        // group_spec.insert("ZETA_FRONT".to_string(), ParameterSpec::Atom(ParameterSpecAtom::String));
        // group_spec.insert("EXTERNAL_FLUX_RAMP".to_string(), ParameterSpec::Atom(ParameterSpecAtom::String));
        // group_spec.insert("TAU_EXTERNAL_FLUX".to_string(), ParameterSpec::Atom(ParameterSpecAtom::String));
        // group_spec.insert("VOLUME_FLUX".to_string(), ParameterSpec::Atom(ParameterSpecAtom::String));
        namelist_spec.insert("SURF".to_string(), group_spec);
    }
    {
        let mut group_spec = HashMap::new();
        group_spec.insert("CHECK_POISSON".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Bool));
        group_spec.insert("FISHPAK_BC".to_string(), ParameterSpec::Array(ParameterSpecAtom::Int));
        // group_spec.insert("GLMAT_SOLVER".to_string(), ParameterSpec::Atom(ParameterSpecAtom::String));
        group_spec.insert("ITERATION_SUSPEND_FACTOR".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Double));
        // group_spec.insert("LAPLACE_PRESSURE_CORRECTION".to_string(), ParameterSpec::Atom(ParameterSpecAtom::String));
        group_spec.insert("MAX_PRESSURE_ITERATIONS".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Int));
        group_spec.insert("PRESSURE_RELAX_TIME".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Double));
        group_spec.insert("PRESSURE_TOLERANCE".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Double));
        group_spec.insert("RELAXATION_FACTOR".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Double));
        group_spec.insert("SCARC_METHOD".to_string(), ParameterSpec::Atom(ParameterSpecAtom::String));
        group_spec.insert("SCARC_KRYLOV".to_string(), ParameterSpec::Atom(ParameterSpecAtom::String));
        group_spec.insert("SCARC_MULTIGRID".to_string(), ParameterSpec::Atom(ParameterSpecAtom::String));
        group_spec.insert("SCARC_SMOOTH".to_string(), ParameterSpec::Atom(ParameterSpecAtom::String));
        group_spec.insert("SCARC_PRECON".to_string(), ParameterSpec::Atom(ParameterSpecAtom::String));
        group_spec.insert("SCARC_COARSE".to_string(), ParameterSpec::Atom(ParameterSpecAtom::String));
        group_spec.insert("SCARC_INITIAL".to_string(), ParameterSpec::Atom(ParameterSpecAtom::String));
        group_spec.insert("SCARC_ACCURACY".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Double));
        group_spec.insert("SCARC_DEBUG".to_string(), ParameterSpec::Atom(ParameterSpecAtom::String));
        group_spec.insert("SCARC_MULTIGRID_CYCLE".to_string(), ParameterSpec::Atom(ParameterSpecAtom::String));
        group_spec.insert("SCARC_MULTIGRID_LEVEL".to_string(), ParameterSpec::Atom(ParameterSpecAtom::String));
        group_spec.insert("SCARC_MULTIGRID_COARSENING".to_string(), ParameterSpec::Atom(ParameterSpecAtom::String));
        group_spec.insert("SCARC_MULTIGRID_ITERATIONS".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Int));
        group_spec.insert("SCARC_MULTIGRID_ACCURACY".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Double));
        group_spec.insert("SCARC_MULTIGRID_INTERPOL".to_string(), ParameterSpec::Atom(ParameterSpecAtom::String));
        group_spec.insert("SCARC_KRYLOV_ITERATIONS".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Int));
        group_spec.insert("SCARC_KRYLOV_ACCURACY".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Double));
        group_spec.insert("SCARC_SMOOTH_ITERATIONS".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Int));
        group_spec.insert("SCARC_SMOOTH_ACCURACY".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Double));
        group_spec.insert("SCARC_SMOOTH_OMEGA".to_string(), ParameterSpec::Atom(ParameterSpecAtom::String));
        group_spec.insert("SCARC_PRECON_ITERATIONS".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Int));
        group_spec.insert("SCARC_PRECON_ACCURACY".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Double));
        group_spec.insert("SCARC_PRECON_OMEGA".to_string(), ParameterSpec::Atom(ParameterSpecAtom::String));
        group_spec.insert("SCARC_COARSE_ITERATIONS".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Int));
        group_spec.insert("SCARC_COARSE_ACCURACY".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Double));
        group_spec.insert("SOLVER".to_string(), ParameterSpec::Atom(ParameterSpecAtom::String));
        group_spec.insert("SUSPEND_PRESSURE_ITERATIONS".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Int));
        group_spec.insert("VELOCITY_TOLERANCE".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Double));
        namelist_spec.insert("PRES".to_string(), group_spec);
    }
    {
        let mut group_spec = HashMap::new();
        group_spec.insert("ANGLE_INCREMENT".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Int));
        group_spec.insert("BAND_LIMITS".to_string(), ParameterSpec::Array(ParameterSpecAtom::Double));
        group_spec.insert("C_MAX".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Double));
        group_spec.insert("C_MIN".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Double));
        group_spec.insert("INITIAL_RADIATION_ITERATIONS".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Int));
        group_spec.insert("KAPPA0".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Double));
        group_spec.insert("NMIEANG".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Int));
        group_spec.insert("NUMBER_RADIATION_ANGLES".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Int));
        group_spec.insert("PATH_LENGTH".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Double));
        group_spec.insert("RADIATION".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Bool));
        group_spec.insert("RADIATION_ITERATIONS".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Int));
        // group_spec.insert("RADIATIVE_FRACTION".to_string(), ParameterSpec::Atom(ParameterSpecAtom::String));
        group_spec.insert("RADTMP".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Double));
        // group_spec.insert("RTE_SOURCE_CORRECTION".to_string(), ParameterSpec::Atom(ParameterSpecAtom::String));
        group_spec.insert("TIME_STEP_INCREMENT".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Int));
        group_spec.insert("WIDE_BAND_MODEL".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Bool));
        group_spec.insert("MIE_MINIMUM_DIAMETER".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Double));
        group_spec.insert("MIE_MAXIMUM_DIAMETER".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Double));
        group_spec.insert("MIE_NDG".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Int));
        group_spec.insert("NUMBER_INITIAL_ITERATIONS".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Int));
        group_spec.insert("QR_CLIP".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Double));
        namelist_spec.insert("RADI".to_string(), group_spec);
    }
    {
        let mut group_spec = HashMap::new();
        group_spec.insert("FYI".to_string(), ParameterSpec::Atom(ParameterSpecAtom::String));
        group_spec.insert("MAXIMUM_DENSITY".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Double));
        group_spec.insert("MAXIMUM_TEMPERATURE".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Double));
        group_spec.insert("MINIMUM_DENSITY".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Double));
        group_spec.insert("MINIMUM_TEMPERATURE".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Double));
        namelist_spec.insert("CLIP".to_string(), group_spec);
    }
    {
        let mut group_spec = HashMap::new();
        group_spec.insert("CTRL_ID".to_string(), ParameterSpec::Atom(ParameterSpecAtom::String));
        group_spec.insert("DEVC_ID".to_string(), ParameterSpec::Atom(ParameterSpecAtom::String));
        group_spec.insert("F".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Double));
        group_spec.insert("FYI".to_string(), ParameterSpec::Atom(ParameterSpecAtom::String));
        group_spec.insert("ID".to_string(), ParameterSpec::Atom(ParameterSpecAtom::String));
        group_spec.insert("NUMBER_INTERPOLATION_POINTS".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Int));
        group_spec.insert("T".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Double));
        group_spec.insert("X".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Double));
        group_spec.insert("Z".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Double));
        namelist_spec.insert("RAMP".to_string(), group_spec);
    }
    {
        let mut group_spec = HashMap::new();
        group_spec.insert("FYI".to_string(), ParameterSpec::Atom(ParameterSpecAtom::String));
        group_spec.insert("ID".to_string(), ParameterSpec::Atom(ParameterSpecAtom::String));
        group_spec.insert("TABLE_DATA".to_string(), ParameterSpec::Array(ParameterSpecAtom::Double));
        namelist_spec.insert("TABL".to_string(), group_spec);
    }
    {
        let mut group_spec = HashMap::new();
        group_spec.insert("ALLOW_VENT".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Bool));
        group_spec.insert("BNDF_FACE".to_string(), ParameterSpec::Array(ParameterSpecAtom::Bool));
        group_spec.insert("BNDF_OBST".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Bool));
        group_spec.insert("BULK_DENSITY".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Double));
        group_spec.insert("COLOR".to_string(), ParameterSpec::Atom(ParameterSpecAtom::String));
        group_spec.insert("CTRL_ID".to_string(), ParameterSpec::Atom(ParameterSpecAtom::String));
        group_spec.insert("DEVC_ID".to_string(), ParameterSpec::Atom(ParameterSpecAtom::String));
        group_spec.insert("EVACUATION".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Bool));
        group_spec.insert("FYI".to_string(), ParameterSpec::Atom(ParameterSpecAtom::String));
        group_spec.insert("HT3D".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Bool));
        group_spec.insert("ID".to_string(), ParameterSpec::Atom(ParameterSpecAtom::String));
        group_spec.insert("MATL_ID".to_string(), ParameterSpec::Atom(ParameterSpecAtom::String));
        group_spec.insert("MESH_ID".to_string(), ParameterSpec::Atom(ParameterSpecAtom::String));
        group_spec.insert("MULT_ID".to_string(), ParameterSpec::Atom(ParameterSpecAtom::String));
        group_spec.insert("NOTERRAIN".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Bool));
        group_spec.insert("OUTLINE".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Bool));
        group_spec.insert("OVERLAY".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Bool));
        group_spec.insert("PERMIT_HOLE".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Bool));
        group_spec.insert("PROP_ID".to_string(), ParameterSpec::Atom(ParameterSpecAtom::String));
        group_spec.insert("REMOVABLE".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Bool));
        group_spec.insert("RGB".to_string(), ParameterSpec::Array(ParameterSpecAtom::Double));
        group_spec.insert("SURF_ID".to_string(), ParameterSpec::Atom(ParameterSpecAtom::String));
        group_spec.insert("SURF_ID6".to_string(), ParameterSpec::Array(ParameterSpecAtom::String));
        group_spec.insert("SURF_IDS".to_string(), ParameterSpec::Array(ParameterSpecAtom::String));
        group_spec.insert("TEXTURE_ORIGIN".to_string(), ParameterSpec::Array(ParameterSpecAtom::Double));
        group_spec.insert("THICKEN".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Bool));
        group_spec.insert("TRANSPARENCY".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Double));
        group_spec.insert("XB".to_string(), ParameterSpec::Array(ParameterSpecAtom::Double));
        namelist_spec.insert("OBST".to_string(), group_spec);
    }
    {
        let mut group_spec = HashMap::new();
        group_spec.insert("COLOR".to_string(), ParameterSpec::Atom(ParameterSpecAtom::String));
        group_spec.insert("CTRL_ID".to_string(), ParameterSpec::Atom(ParameterSpecAtom::String));
        group_spec.insert("DEVC_ID".to_string(), ParameterSpec::Atom(ParameterSpecAtom::String));
        group_spec.insert("EVACUATION".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Bool));
        group_spec.insert("FYI".to_string(), ParameterSpec::Atom(ParameterSpecAtom::String));
        group_spec.insert("ID".to_string(), ParameterSpec::Atom(ParameterSpecAtom::String));
        group_spec.insert("MESH_ID".to_string(), ParameterSpec::Atom(ParameterSpecAtom::String));
        group_spec.insert("MULT_ID".to_string(), ParameterSpec::Atom(ParameterSpecAtom::String));
        group_spec.insert("RGB".to_string(), ParameterSpec::Array(ParameterSpecAtom::Double));
        group_spec.insert("TRANSPARENCY".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Double));
        group_spec.insert("XB".to_string(), ParameterSpec::Array(ParameterSpecAtom::Double));
        namelist_spec.insert("HOLE".to_string(), group_spec);
    }
    {
        let mut group_spec = HashMap::new();
        group_spec.insert("COLOR".to_string(), ParameterSpec::Atom(ParameterSpecAtom::String));
        group_spec.insert("CTRL_ID".to_string(), ParameterSpec::Atom(ParameterSpecAtom::String));
        group_spec.insert("DEVC_ID".to_string(), ParameterSpec::Atom(ParameterSpecAtom::String));
        group_spec.insert("DYNAMIC_PRESSURE".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Double));
        group_spec.insert("EVACUATION".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Bool));
        group_spec.insert("FYI".to_string(), ParameterSpec::Atom(ParameterSpecAtom::String));
        group_spec.insert("ID".to_string(), ParameterSpec::Atom(ParameterSpecAtom::String));
        group_spec.insert("IOR".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Int));
        group_spec.insert("L_EDDY".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Double));
        group_spec.insert("L_EDDY_IJ".to_string(), ParameterSpec::Array(ParameterSpecAtom::Int));
        group_spec.insert("MB".to_string(), ParameterSpec::Atom(ParameterSpecAtom::String));
        group_spec.insert("MESH_ID".to_string(), ParameterSpec::Atom(ParameterSpecAtom::String));
        group_spec.insert("MULT_ID".to_string(), ParameterSpec::Atom(ParameterSpecAtom::String));
        group_spec.insert("N_EDDY".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Int));
        group_spec.insert("OUTLINE".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Bool));
        group_spec.insert("PBX".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Double));
        group_spec.insert("PBY".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Double));
        group_spec.insert("PBZ".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Double));
        group_spec.insert("PRESSURE_RAMP".to_string(), ParameterSpec::Atom(ParameterSpecAtom::String));
        group_spec.insert("RADIUS".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Double));
        group_spec.insert("REYNOLDS_STRESS".to_string(), ParameterSpec::Array(ParameterSpecAtom::Double));
        group_spec.insert("RGB".to_string(), ParameterSpec::Array(ParameterSpecAtom::Double));
        group_spec.insert("SPREAD_RATE".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Double));
        group_spec.insert("SURF_ID".to_string(), ParameterSpec::Atom(ParameterSpecAtom::String));
        group_spec.insert("TEXTURE_ORIGIN".to_string(), ParameterSpec::Array(ParameterSpecAtom::Double));
        group_spec.insert("TMP_EXTERIOR".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Double));
        group_spec.insert("TMP_EXTERIOR_RAMP".to_string(), ParameterSpec::Atom(ParameterSpecAtom::String));
        group_spec.insert("TRANSPARENCY".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Double));
        group_spec.insert("UVW".to_string(), ParameterSpec::Array(ParameterSpecAtom::Double));
        group_spec.insert("VEL_RMS".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Double));
        // group_spec.insert("WIND".to_string(), ParameterSpec::Atom(ParameterSpecAtom::String));
        group_spec.insert("XB".to_string(), ParameterSpec::Array(ParameterSpecAtom::Double));
        group_spec.insert("XYZ".to_string(), ParameterSpec::Array(ParameterSpecAtom::Double));
        namelist_spec.insert("VENT".to_string(), group_spec);
    }
    {
        let mut group_spec = HashMap::new();
        group_spec.insert("AUTO_IGNITION_TEMPERATURE".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Double));
        group_spec.insert("CELL_CENTERED".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Bool));
        group_spec.insert("CTRL_ID".to_string(), ParameterSpec::Atom(ParameterSpecAtom::String));
        group_spec.insert("DENSITY".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Double));
        group_spec.insert("DEVC_ID".to_string(), ParameterSpec::Atom(ParameterSpecAtom::String));
        group_spec.insert("DIAMETER".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Double));
        group_spec.insert("DT_INSERT".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Double));
        group_spec.insert("DX".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Double));
        group_spec.insert("DY".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Double));
        group_spec.insert("DZ".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Double));
        group_spec.insert("HEIGHT".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Double));
        group_spec.insert("HRRPUV".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Double));
        group_spec.insert("ID".to_string(), ParameterSpec::Atom(ParameterSpecAtom::String));
        group_spec.insert("MASS_FRACTION".to_string(), ParameterSpec::Array(ParameterSpecAtom::Double));
        group_spec.insert("MASS_PER_TIME".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Double));
        group_spec.insert("MASS_PER_VOLUME".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Double));
        group_spec.insert("MULT_ID".to_string(), ParameterSpec::Atom(ParameterSpecAtom::String));
        group_spec.insert("N_PARTICLES".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Int));
        group_spec.insert("N_PARTICLES_PER_CELL".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Int));
        group_spec.insert("PART_ID".to_string(), ParameterSpec::Atom(ParameterSpecAtom::String));
        group_spec.insert("RADIUS".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Double));
        group_spec.insert("SHAPE".to_string(), ParameterSpec::Atom(ParameterSpecAtom::String));
        group_spec.insert("SPEC_ID".to_string(), ParameterSpec::Array(ParameterSpecAtom::String));
        group_spec.insert("TEMPERATURE".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Double));
        group_spec.insert("UVW".to_string(), ParameterSpec::Array(ParameterSpecAtom::Double));
        group_spec.insert("XB".to_string(), ParameterSpec::Array(ParameterSpecAtom::Double));
        group_spec.insert("XYZ".to_string(), ParameterSpec::Array(ParameterSpecAtom::Double));
        group_spec.insert("PARTICLE_WEIGHT_FACTOR".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Double));
        group_spec.insert("NUMBER_INITIAL_PARTICLES".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Int));
        namelist_spec.insert("INIT".to_string(), group_spec);
    }
    {
        let mut group_spec = HashMap::new();
        group_spec.insert("ID".to_string(), ParameterSpec::Atom(ParameterSpecAtom::String));
        group_spec.insert("LEAK_AREA".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Double));
        group_spec.insert("LEAK_PRESSURE_EXPONENT".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Double));
        group_spec.insert("LEAK_REFERENCE_PRESSURE".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Double));
        group_spec.insert("XB".to_string(), ParameterSpec::Array(ParameterSpecAtom::Double));
        group_spec.insert("PERIODIC".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Bool));
        namelist_spec.insert("ZONE".to_string(), group_spec);
    }
    {
        let mut group_spec = HashMap::new();
        group_spec.insert("BYPASS_FLOWRATE".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Double));
        group_spec.insert("CONVERSION_FACTOR".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Double));
        group_spec.insert("COORD_FACTOR".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Double));
        group_spec.insert("CTRL_ID".to_string(), ParameterSpec::Atom(ParameterSpecAtom::String));
        group_spec.insert("DELAY".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Double));
        group_spec.insert("DEPTH".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Double));
        group_spec.insert("DEVC_ID".to_string(), ParameterSpec::Atom(ParameterSpecAtom::String));
        group_spec.insert("DRY".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Bool));
        group_spec.insert("DUCT_ID".to_string(), ParameterSpec::Atom(ParameterSpecAtom::String));
        group_spec.insert("EVACUATION".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Bool));
        group_spec.insert("FLOWRATE".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Double));
        group_spec.insert("FYI".to_string(), ParameterSpec::Atom(ParameterSpecAtom::String));
        // group_spec.insert("GHOST_CELL_IOR".to_string(), ParameterSpec::Atom(ParameterSpecAtom::String));
        group_spec.insert("HIDE_COORDINATES".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Bool));
        group_spec.insert("ID".to_string(), ParameterSpec::Atom(ParameterSpecAtom::String));
        group_spec.insert("INITIAL_STATE".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Bool));
        group_spec.insert("INIT_ID".to_string(), ParameterSpec::Atom(ParameterSpecAtom::String));
        group_spec.insert("IOR".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Int));
        group_spec.insert("LATCH".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Bool));
        group_spec.insert("MATL_ID".to_string(), ParameterSpec::Atom(ParameterSpecAtom::String));
        group_spec.insert("NODE_ID".to_string(), ParameterSpec::Array(ParameterSpecAtom::String));
        group_spec.insert("NO_UPDATE_DEVC_ID".to_string(), ParameterSpec::Atom(ParameterSpecAtom::String));
        group_spec.insert("NO_UPDATE_CTRL_ID".to_string(), ParameterSpec::Atom(ParameterSpecAtom::String));
        group_spec.insert("ORIENTATION".to_string(), ParameterSpec::Array(ParameterSpecAtom::Double));
        group_spec.insert("ORIENTATION_NUMBER".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Int));
        group_spec.insert("OUTPUT".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Bool));
        group_spec.insert("PART_ID".to_string(), ParameterSpec::Atom(ParameterSpecAtom::String));
        group_spec.insert("PIPE_INDEX".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Int));
        group_spec.insert("POINTS".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Int));
        group_spec.insert("PROP_ID".to_string(), ParameterSpec::Atom(ParameterSpecAtom::String));
        group_spec.insert("QUANTITY".to_string(), ParameterSpec::Atom(ParameterSpecAtom::String));
        group_spec.insert("QUANTITY2".to_string(), ParameterSpec::Atom(ParameterSpecAtom::String));
        group_spec.insert("QUANTITY_RANGE".to_string(), ParameterSpec::Array(ParameterSpecAtom::Double));
        group_spec.insert("R_ID".to_string(), ParameterSpec::Atom(ParameterSpecAtom::String));
        group_spec.insert("REAC_ID".to_string(), ParameterSpec::Atom(ParameterSpecAtom::String));
        group_spec.insert("RELATIVE".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Bool));
        group_spec.insert("ROTATION".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Double));
        group_spec.insert("SETPOINT".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Double));
        group_spec.insert("SMOOTHING_FACTOR".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Double));
        group_spec.insert("SPEC_ID".to_string(), ParameterSpec::Atom(ParameterSpecAtom::String));
        group_spec.insert("STATISTICS".to_string(), ParameterSpec::Atom(ParameterSpecAtom::String));
        group_spec.insert("STATISTICS_START".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Double));
        group_spec.insert("SURF_ID".to_string(), ParameterSpec::Atom(ParameterSpecAtom::String));
        group_spec.insert("TIME_AVERAGED".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Bool));
        group_spec.insert("TIME_HISTORY".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Bool));
        group_spec.insert("TRIP_DIRECTION".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Int));
        group_spec.insert("UNITS".to_string(), ParameterSpec::Atom(ParameterSpecAtom::String));
        group_spec.insert("VELO_INDEX".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Int));
        group_spec.insert("XB".to_string(), ParameterSpec::Array(ParameterSpecAtom::Double));
        group_spec.insert("XYZ".to_string(), ParameterSpec::Array(ParameterSpecAtom::Double));
        group_spec.insert("X_ID".to_string(), ParameterSpec::Atom(ParameterSpecAtom::String));
        group_spec.insert("Y_ID".to_string(), ParameterSpec::Atom(ParameterSpecAtom::String));
        group_spec.insert("Z_ID".to_string(), ParameterSpec::Atom(ParameterSpecAtom::String));
        namelist_spec.insert("DEVC".to_string(), group_spec);
    }
    {
        let mut group_spec = HashMap::new();
        group_spec.insert("CONSTANT".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Double));
        // group_spec.insert("CYCLES".to_string(), ParameterSpec::Atom(ParameterSpecAtom::String));
        // group_spec.insert("CYCLE_TIME".to_string(), ParameterSpec::Atom(ParameterSpecAtom::String));
        group_spec.insert("DELAY".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Double));
        group_spec.insert("DIFFERENTIAL_GAIN".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Double));
        group_spec.insert("EVACUATION".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Bool));
        group_spec.insert("FUNCTION_TYPE".to_string(), ParameterSpec::Atom(ParameterSpecAtom::String));
        group_spec.insert("ID".to_string(), ParameterSpec::Atom(ParameterSpecAtom::String));
        group_spec.insert("INITIAL_STATE".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Bool));
        group_spec.insert("INTEGRAL_GAIN".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Double));
        group_spec.insert("INPUT_ID".to_string(), ParameterSpec::Array(ParameterSpecAtom::String));
        group_spec.insert("LATCH".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Bool));
        group_spec.insert("N".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Int));
        group_spec.insert("ON_BOUND".to_string(), ParameterSpec::Atom(ParameterSpecAtom::String));
        group_spec.insert("PROPORTIONAL_GAIN".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Double));
        group_spec.insert("RAMP_ID".to_string(), ParameterSpec::Atom(ParameterSpecAtom::String));
        group_spec.insert("SETPOINT".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Double));
        group_spec.insert("TARGET_VALUE".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Double));
        group_spec.insert("TRIP_DIRECTION".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Int));
        namelist_spec.insert("CTRL".to_string(), group_spec);
    }
    {
        let mut group_spec = HashMap::new();
        group_spec.insert("FORMAT_INDEX".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Int));
        group_spec.insert("FYI".to_string(), ParameterSpec::Atom(ParameterSpecAtom::String));
        group_spec.insert("ID".to_string(), ParameterSpec::Atom(ParameterSpecAtom::String));
        group_spec.insert("IOR".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Int));
        group_spec.insert("QUANTITY".to_string(), ParameterSpec::Atom(ParameterSpecAtom::String));
        group_spec.insert("XYZ".to_string(), ParameterSpec::Array(ParameterSpecAtom::Double));
        namelist_spec.insert("PROF".to_string(), group_spec);
    }
    {
        let mut group_spec = HashMap::new();
        group_spec.insert("FYI".to_string(), ParameterSpec::Atom(ParameterSpecAtom::String));
        group_spec.insert("QUANTITY".to_string(), ParameterSpec::Atom(ParameterSpecAtom::String));
        group_spec.insert("SPEC_ID".to_string(), ParameterSpec::Atom(ParameterSpecAtom::String));
        group_spec.insert("VALUE".to_string(), ParameterSpec::Array(ParameterSpecAtom::Double));
        group_spec.insert("VELO_INDEX".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Int));
        namelist_spec.insert("ISOF".to_string(), group_spec);
    }
    {
        let mut group_spec = HashMap::new();
        group_spec.insert("AGL_SLICE".to_string(), ParameterSpec::Atom(ParameterSpecAtom::String));
        group_spec.insert("CELL_CENTERED".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Bool));
        group_spec.insert("EVACUATION".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Bool));
        // group_spec.insert("FACE_CENTERED".to_string(), ParameterSpec::Atom(ParameterSpecAtom::String));
        // group_spec.insert("FIRE_LINE".to_string(), ParameterSpec::Atom(ParameterSpecAtom::String));
        group_spec.insert("FYI".to_string(), ParameterSpec::Atom(ParameterSpecAtom::String));
        group_spec.insert("ID".to_string(), ParameterSpec::Atom(ParameterSpecAtom::String));
        group_spec.insert("IOR".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Int));
        group_spec.insert("LEVEL_SET_FIRE_LINE".to_string(), ParameterSpec::Atom(ParameterSpecAtom::String));
        group_spec.insert("MAXIMUM_VALUE".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Double));
        group_spec.insert("MESH_NUMBER".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Int));
        group_spec.insert("MINIMUM_VALUE".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Double));
        group_spec.insert("PART_ID".to_string(), ParameterSpec::Atom(ParameterSpecAtom::String));
        group_spec.insert("PBX".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Double));
        group_spec.insert("PBY".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Double));
        group_spec.insert("PBZ".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Double));
        // group_spec.insert("PROP_ID".to_string(), ParameterSpec::Atom(ParameterSpecAtom::String));
        group_spec.insert("QUANTITY".to_string(), ParameterSpec::Atom(ParameterSpecAtom::String));
        group_spec.insert("QUANTITY2".to_string(), ParameterSpec::Atom(ParameterSpecAtom::String));
        group_spec.insert("REAC_ID".to_string(), ParameterSpec::Atom(ParameterSpecAtom::String));
        // group_spec.insert("SLICETYPE".to_string(), ParameterSpec::Atom(ParameterSpecAtom::String));
        group_spec.insert("SPEC_ID".to_string(), ParameterSpec::Atom(ParameterSpecAtom::String));
        group_spec.insert("VECTOR".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Bool));
        group_spec.insert("VELO_INDEX".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Int));
        group_spec.insert("XB".to_string(), ParameterSpec::Array(ParameterSpecAtom::Double));
        namelist_spec.insert("SLCF".to_string(), group_spec);
    }
    {
        let mut group_spec = HashMap::new();
        group_spec.insert("CELL_CENTERED".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Bool));
        group_spec.insert("FYI".to_string(), ParameterSpec::Atom(ParameterSpecAtom::String));
        group_spec.insert("PART_ID".to_string(), ParameterSpec::Atom(ParameterSpecAtom::String));
        group_spec.insert("PROP_ID".to_string(), ParameterSpec::Atom(ParameterSpecAtom::String));
        group_spec.insert("QUANTITY".to_string(), ParameterSpec::Atom(ParameterSpecAtom::String));
        group_spec.insert("SPEC_ID".to_string(), ParameterSpec::Atom(ParameterSpecAtom::String));
        group_spec.insert("STATISTICS".to_string(), ParameterSpec::Atom(ParameterSpecAtom::String));
        namelist_spec.insert("BNDF".to_string(), group_spec);
    }
    {
        let mut group_spec = HashMap::new();
        group_spec.insert("CELL_CENTERED".to_string(), ParameterSpec::Atom(ParameterSpecAtom::String));
        group_spec.insert("FYI".to_string(), ParameterSpec::Atom(ParameterSpecAtom::String));
        group_spec.insert("PART_ID".to_string(), ParameterSpec::Atom(ParameterSpecAtom::String));
        group_spec.insert("PROP_ID".to_string(), ParameterSpec::Atom(ParameterSpecAtom::String));
        group_spec.insert("QUANTITY".to_string(), ParameterSpec::Atom(ParameterSpecAtom::String));
        group_spec.insert("SPEC_ID".to_string(), ParameterSpec::Atom(ParameterSpecAtom::String));
        namelist_spec.insert("BNDE".to_string(), group_spec);
    }
    {
        let mut group_spec = HashMap::new();
        group_spec.insert("AIRCOIL_ID".to_string(), ParameterSpec::Atom(ParameterSpecAtom::String));
        group_spec.insert("AMBIENT".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Bool));
        group_spec.insert("AREA".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Double));
        group_spec.insert("CLEAN_LOSS".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Double));
        group_spec.insert("COOLANT_SPECIFIC_HEAT".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Double));
        group_spec.insert("COOLANT_MASS_FLOW".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Double));
        group_spec.insert("COOLANT_TEMPERATURE".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Double));
        group_spec.insert("CTRL_ID".to_string(), ParameterSpec::Atom(ParameterSpecAtom::String));
        group_spec.insert("DAMPER".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Bool));
        group_spec.insert("DEVC_ID".to_string(), ParameterSpec::Atom(ParameterSpecAtom::String));
        group_spec.insert("DIAMETER".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Double));
        group_spec.insert("DUCT_ID".to_string(), ParameterSpec::Array(ParameterSpecAtom::String));
        group_spec.insert("DUCT_INTERP_TYPE".to_string(), ParameterSpec::Atom(ParameterSpecAtom::String));
        group_spec.insert("EFFICIENCY".to_string(), ParameterSpec::Array(ParameterSpecAtom::Double));
        group_spec.insert("FAN_ID".to_string(), ParameterSpec::Atom(ParameterSpecAtom::String));
        group_spec.insert("FILTER_ID".to_string(), ParameterSpec::Atom(ParameterSpecAtom::String));
        group_spec.insert("FIXED_Q".to_string(), ParameterSpec::Array(ParameterSpecAtom::Double));
        group_spec.insert("ID".to_string(), ParameterSpec::Atom(ParameterSpecAtom::String));
        group_spec.insert("LEAK_ENTHALPY".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Bool));
        group_spec.insert("LENGTH".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Double));
        group_spec.insert("LOADING".to_string(), ParameterSpec::Array(ParameterSpecAtom::Double));
        group_spec.insert("LOADING_MULTIPLIER".to_string(), ParameterSpec::Array(ParameterSpecAtom::Double));
        group_spec.insert("LOSS".to_string(), ParameterSpec::Array(ParameterSpecAtom::Double));
        group_spec.insert("MASS_FLOW".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Double));
        group_spec.insert("MAX_FLOW".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Double));
        group_spec.insert("MAX_PRESSURE".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Double));
        group_spec.insert("N_CELLS".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Int));
        group_spec.insert("NODE_ID".to_string(), ParameterSpec::Array(ParameterSpecAtom::String));
        group_spec.insert("PERIMETER".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Double));
        group_spec.insert("RAMP_ID".to_string(), ParameterSpec::Atom(ParameterSpecAtom::String));
        group_spec.insert("RAMP_LOSS".to_string(), ParameterSpec::Atom(ParameterSpecAtom::String));
        group_spec.insert("REVERSE".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Bool));
        group_spec.insert("ROUGHNESS".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Double));
        group_spec.insert("SPEC_ID".to_string(), ParameterSpec::Atom(ParameterSpecAtom::String));
        group_spec.insert("TAU_AC".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Double));
        group_spec.insert("TAU_FAN".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Double));
        group_spec.insert("TAU_VF".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Double));
        group_spec.insert("TYPE_ID".to_string(), ParameterSpec::Atom(ParameterSpecAtom::String));
        group_spec.insert("VENT_ID".to_string(), ParameterSpec::Atom(ParameterSpecAtom::String));
        group_spec.insert("VENT2_ID".to_string(), ParameterSpec::Atom(ParameterSpecAtom::String));
        group_spec.insert("VOLUME_FLOW".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Double));
        group_spec.insert("XYZ".to_string(), ParameterSpec::Array(ParameterSpecAtom::Double));
        namelist_spec.insert("HVAC".to_string(), group_spec);
    }
    // {
    //     let mut group_spec = HashMap::new();
    //     group_spec.insert("AUTO_TEXTURE".to_string(), ParameterSpec::Atom(ParameterSpecAtom::String));
    //     group_spec.insert("AZIM".to_string(), ParameterSpec::Atom(ParameterSpecAtom::String));
    //     group_spec.insert("AZIM_DOT".to_string(), ParameterSpec::Atom(ParameterSpecAtom::String));
    //     group_spec.insert("COMPONENT_ONLY".to_string(), ParameterSpec::Atom(ParameterSpecAtom::String));
    //     group_spec.insert("CUTCELLS".to_string(), ParameterSpec::Atom(ParameterSpecAtom::String));
    //     group_spec.insert("DAZIM".to_string(), ParameterSpec::Atom(ParameterSpecAtom::String));
    //     group_spec.insert("DELEV".to_string(), ParameterSpec::Atom(ParameterSpecAtom::String));
    //     group_spec.insert("DSCALE".to_string(), ParameterSpec::Atom(ParameterSpecAtom::String));
    //     group_spec.insert("DT_BNDC".to_string(), ParameterSpec::Atom(ParameterSpecAtom::String));
    //     group_spec.insert("DT_GEOC".to_string(), ParameterSpec::Atom(ParameterSpecAtom::String));
    //     group_spec.insert("DXYZ0".to_string(), ParameterSpec::Atom(ParameterSpecAtom::String));
    //     group_spec.insert("DXYZ".to_string(), ParameterSpec::Atom(ParameterSpecAtom::String));
    //     group_spec.insert("ELEV".to_string(), ParameterSpec::Atom(ParameterSpecAtom::String));
    //     group_spec.insert("ELEV_DOT".to_string(), ParameterSpec::Atom(ParameterSpecAtom::String));
    //     group_spec.insert("FACES".to_string(), ParameterSpec::Atom(ParameterSpecAtom::String));
    //     group_spec.insert("GAXIS".to_string(), ParameterSpec::Atom(ParameterSpecAtom::String));
    //     group_spec.insert("GEOM_IDS".to_string(), ParameterSpec::Atom(ParameterSpecAtom::String));
    //     group_spec.insert("GROTATE".to_string(), ParameterSpec::Atom(ParameterSpecAtom::String));
    //     group_spec.insert("GROTATE_DOT".to_string(), ParameterSpec::Atom(ParameterSpecAtom::String));
    //     group_spec.insert("ID".to_string(), ParameterSpec::Atom(ParameterSpecAtom::String));
    //     group_spec.insert("IJK".to_string(), ParameterSpec::Array(ParameterSpecAtom::Int));
    //     group_spec.insert("MATL_ID".to_string(), ParameterSpec::Atom(ParameterSpecAtom::String));
    //     group_spec.insert("N_LAT".to_string(), ParameterSpec::Atom(ParameterSpecAtom::String));
    //     group_spec.insert("N_LEVELS".to_string(), ParameterSpec::Atom(ParameterSpecAtom::String));
    //     group_spec.insert("N_LONG".to_string(), ParameterSpec::Atom(ParameterSpecAtom::String));
    //     group_spec.insert("SCALE".to_string(), ParameterSpec::Atom(ParameterSpecAtom::String));
    //     group_spec.insert("SCALE_DOT".to_string(), ParameterSpec::Atom(ParameterSpecAtom::String));
    //     group_spec.insert("SPHERE_ORIGIN".to_string(), ParameterSpec::Atom(ParameterSpecAtom::String));
    //     group_spec.insert("SPHERE_RADIUS".to_string(), ParameterSpec::Atom(ParameterSpecAtom::String));
    //     group_spec.insert("SPHERE_TYPE".to_string(), ParameterSpec::Atom(ParameterSpecAtom::String));
    //     group_spec.insert("SURF_ID".to_string(), ParameterSpec::Atom(ParameterSpecAtom::String));
    //     group_spec.insert("TEXTURE_MAPPING".to_string(), ParameterSpec::Atom(ParameterSpecAtom::String));
    //     group_spec.insert("TEXTURE_ORIGIN".to_string(), ParameterSpec::Atom(ParameterSpecAtom::String));
    //     group_spec.insert("TEXTURE_SCALE".to_string(), ParameterSpec::Atom(ParameterSpecAtom::String));
    //     group_spec.insert("VERTS".to_string(), ParameterSpec::Atom(ParameterSpecAtom::String));
    //     group_spec.insert("VOLUS".to_string(), ParameterSpec::Atom(ParameterSpecAtom::String));
    //     group_spec.insert("XB".to_string(), ParameterSpec::Array(ParameterSpecAtom::Double));
    //     group_spec.insert("XYZ0".to_string(), ParameterSpec::Atom(ParameterSpecAtom::String));
    //     group_spec.insert("XYZ".to_string(), ParameterSpec::Array(ParameterSpecAtom::Double));
    //     group_spec.insert("XYZ_DOT".to_string(), ParameterSpec::Atom(ParameterSpecAtom::String));
    //     group_spec.insert("ZMIN".to_string(), ParameterSpec::Atom(ParameterSpecAtom::String));
    //     group_spec.insert("ZVALS".to_string(), ParameterSpec::Atom(ParameterSpecAtom::String));
    //     group_spec.insert("BNDC_FILENAME".to_string(), ParameterSpec::Atom(ParameterSpecAtom::String));
    //     group_spec.insert("GEOC_FILENAME".to_string(), ParameterSpec::Atom(ParameterSpecAtom::String));
    //     namelist_spec.insert("GEOM".to_string(), group_spec);
    // }
    {
        let mut group_spec = HashMap::new();
        group_spec.insert("CC".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Double));
        group_spec.insert("FYI".to_string(), ParameterSpec::Atom(ParameterSpecAtom::String));
        group_spec.insert("IDERIV".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Int));
        group_spec.insert("MESH_NUMBER".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Int));
        group_spec.insert("PC".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Double));
        namelist_spec.insert("TRNX".to_string(), group_spec);
    }
    {
        let mut group_spec = HashMap::new();
        group_spec.insert("CC".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Double));
        group_spec.insert("FYI".to_string(), ParameterSpec::Atom(ParameterSpecAtom::String));
        group_spec.insert("IDERIV".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Int));
        group_spec.insert("MESH_NUMBER".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Int));
        group_spec.insert("PC".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Double));
        namelist_spec.insert("TRNY".to_string(), group_spec);
    }
    {
        let mut group_spec = HashMap::new();
        group_spec.insert("CC".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Double));
        group_spec.insert("FYI".to_string(), ParameterSpec::Atom(ParameterSpecAtom::String));
        group_spec.insert("IDERIV".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Int));
        group_spec.insert("MESH_NUMBER".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Int));
        group_spec.insert("PC".to_string(), ParameterSpec::Atom(ParameterSpecAtom::Double));
        namelist_spec.insert("TRNZ".to_string(), group_spec);
    }
    {
        let group_spec = HashMap::new();
        namelist_spec.insert("TAIL".to_string(), group_spec);
    }
    namelist_spec
}
